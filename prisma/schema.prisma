// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int         @id @default(autoincrement())
  accountType              AccountType @default(PUBLIC)
  joinedAt                 DateTime    @default(now())
  firstName                String?     @db.VarChar(255)
  lastName                 String?     @db.VarChar(255)
  username                 String      @unique @db.VarChar(255)
  email                    String      @unique @db.VarChar(255)
  password                 String      @db.VarChar(255)
  bod                      DateTime?
  gender                   Gender      @default(PREFER_NOT_TO_SAY)
  role                     Role        @default(USER)
  bio                      String?
  sessionId                String?
  verified                 Boolean     @default(false)
  verifyToken              String?     @unique
  verifyTokenExpire        DateTime?
  resetPasswordToken       String?     @unique
  resetPasswordTokenExpire DateTime?

  posts         Post[]
  likes         Like[]
  comments      Comment[]
  shares        Share[]
  followers     Follower[]     @relation("follower")
  following     Follower[]     @relation("following")
  Notifications Notification[]
  Reply         Reply[]
  reports       Report[]
  commentLikes  CommentLike[] 
}

model Post {
  id        Int       @id @default(autoincrement())
  postType  PostType? @default(PUBLIC)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  title     String
  content   String
  published Boolean?  @default(false)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  likes     Like[]
  comments  Comment[]
  shares    Share[]
  reports   Report[]
  commentLikes CommentLike[]
}

model Like {
  id       Int       @id @default(autoincrement())
  reaction Reactions @default(LIKE)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  Reply     Reply[]
  commentLikes CommentLike[]
}

model CommentLike{
  id Int @id @default(autoincrement())
  reaction Reactions @default(LIKE)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  comment  Comment   @relation(fields:[commentId],references:[id],onDelete:Cascade)
  commentId Int
}

model Reply {
  id        Int     @id @default(autoincrement())
  content   String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
}

model Share {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Report {
  id           Int      @id @default(autoincrement())
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int
  reportedBy   User     @relation(fields: [reportedById], references: [id], onDelete: Cascade)
  reportedById Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([postId, reportedById])
  @@index([postId])
  @@index([reportedById])
}

model Follower {
  id         Int  @id @default(autoincrement())
  authorId   Int
  followerId Int
  author     User @relation("following", fields: [authorId], references: [id])
  follower   User @relation("follower", fields: [followerId], references: [id])

  @@unique([authorId, followerId])
}

model Notification {
  id          Int     @id @default(autoincrement())
  description String  @db.VarChar(255)
  link        String  @db.VarChar(255)
  read        Boolean @default(false)
  author      User    @relation(fields: [authorId], references: [id])
  authorId    Int
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  PREFER_NOT_TO_SAY
  MALE
  FEMALE
}

enum AccountType {
  PRIVATE
  PUBLIC
}

enum PostType {
  PRIVATE
  PUBLIC
  ONLYME
}

enum Reactions {
  LIKE
  LOVE
  HAHA
  SAD
}
